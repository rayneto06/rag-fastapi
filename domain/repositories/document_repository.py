from __future__ import annotations
from typing import Protocol, Iterable, Optional
from pathlib import Path
from domain.entities.document import Document


class DocumentRepository(Protocol):
    def allocate_paths(self, original_filename: str) -> dict:
        """Retorna dict com paths e id gerado: {id, raw_path, text_path, chunks_path, meta_path}."""
        ...

    def save_raw(self, tmp_file: Path, raw_path: Path) -> None: ...
    def save_text(self, text: str, text_path: Path) -> None: ...
    def save_chunks(self, chunks: Iterable[dict], chunks_path: Path) -> int: ...
    def save_meta(self, doc: Document, meta_path: Path) -> None: ...

    def list_documents(self) -> Iterable[Document]: ...
    def get_document(self, doc_id: str) -> Optional[Document]: ...
    def count_chunks(self, doc_id: str) -> int: ...
